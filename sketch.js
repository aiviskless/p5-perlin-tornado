// colors of rectangle lines
const LINE_COLORS = ["#4D9DE0", "#E15554", "#E1BC29", "#3BB273", "#7768AE"];
// count of rectangles on screen
const RECT_COUNT = 75;

// how many lines will be in a rectangle
const LINE_COUNT_IN_RECT = 20;
// modify reactangle size from bottom to up
const RECT_SIZE_MODIF = 100;
// amplitude for rectangle along x axis
const AMPLITUDE = 400;

const Y_OFF_INC = 0.02;
const Z_OFF_INC = 0.005;

// make canvas fullscreen
let w = window.innerWidth;
let h = window.innerHeight;

// initial x, y axis increment values
let yoff = 0;
let zoff = 0;

function setup() {
  createCanvas(w, h);
}

function draw() {
  background(10, 0, 40);

  for (let i = 0; i < RECT_COUNT; i++) {
    /*
      noise() = a number generated by Perlin noise;
      x: This is a number which represents the x-coordinate in the noise space
      y: y-coordinate in the noise space
      z: z-coordinate in the noise space
    */
    const xoff = i * w;
    const noiseVal = noise(xoff, yoff, zoff);
    const n = noiseVal * AMPLITUDE;

    // get line coordinates
    const x1 = (yoff * AMPLITUDE + n * noiseVal) % w;
    const y1 = i * (h / RECT_COUNT);
    const x2 = x1 + noiseVal * (RECT_SIZE_MODIF - i) + RECT_SIZE_MODIF / i;
    const y2 = y1 + noiseVal * (RECT_SIZE_MODIF - i) + RECT_SIZE_MODIF / i;

    // select color for line
    stroke(LINE_COLORS[i % LINE_COLORS.length]);

    // draw LINE_COUNT_IN_RECT random coordinate lines in a reactangle
    for (let j = 0; j < LINE_COUNT_IN_RECT; j++) {
      line(random(x1, x2), random(y1, y2), random(x1, x2), random(y1, y2));
    }
  }

  // increment x, y axis values
  yoff += Y_OFF_INC;
  zoff += Z_OFF_INC;
}

// handle window resize - keep canvas fullscreen
function windowResized() {
  w = window.innerWidth;
  h = window.innerHeight;
  resizeCanvas(w, h);
}